@startuml

hide empty members
skinparam classAttributeIconSize 0
skinparam linetype polyline
skinparam shadowing false

/' Behaviours '/

interface Agressive {
  + getAtk() : int
  + setAtk(atk)
}
interface Collidable {
  + getCollider() : Collider
  + collidesWith(colidee) : boolean
  + shadowStep(position) : Position
}
interface Mortal {
  + getHp() : int
  + setHp(hp)
  + takeDamage(dmg)
  + isAlive() : boolean
}
interface Movable {
  + getMovCounter() : int
  + setMovCounter(numTicks)
  + tickMovCounter()
  + setMoveStrat(moveStrat)
  + genMoves(model, element) : List<Position>
}

class AgressiveBehaviour {}
class CollidableBehaviour {}
class ImmortalBehaviour {}
class ImovableBehaviour {}
class MortalBehaviour {}
class MovableBehaviour {}
class NotCollidableBehaviour {}
class PassiveBehaviour {}

abstract class Element {}

/' Elements '/

package "Game Elements" #BBBBEE {
  class Civilian {}
  class Laser {}
  class MeleeGuy {}
  class Wall {}
  class RangedGuy {}
  class Scent {}
  class Skane {}
  class SkaneBody {}
}

/' Connections '/

AgressiveBehaviour .up.^ Agressive
CollidableBehaviour .up.^ Collidable
ImmortalBehaviour .up.^ Mortal
ImovableBehaviour .up.^ Movable
MortalBehaviour .up.^ Mortal
MovableBehaviour .up.^ Movable
NotCollidableBehaviour .up.^ Collidable
PassiveBehaviour .up.^ Agressive

Element -up-> AgressiveBehaviour
Element -up-> CollidableBehaviour
Element -up-> ImmortalBehaviour
Element -up-> ImovableBehaviour
Element -up-> MortalBehaviour
Element -up-> MovableBehaviour
Element -up-> NotCollidableBehaviour
Element -up-> PassiveBehaviour

Civilian --up-^ Element
Laser --up-^ Element
MeleeGuy --up-^ Element
Wall --up-^ Element
RangedGuy --up-^ Element
Scent --up-^ Element
Skane --up-^ Element
SkaneBody --up-^ Element

@enduml

